########################################################################################################################
#                                                                                                                      #
#                                          Properties for the Ksql API                                                 #
#                                                                                                                      #
########################################################################################################################

# List of listeners. http and https are supported. Each listener must include the protocol, hostname, and port. For example: http://myhost:8080, https://0.0.0.0:8081
ksql.server=http://localhost:8088

# Set the limit for a query stream in the CLI.
ksql.query.stream.row.limit=100

# Default timeout for a KSQL query in the CLI (milliseconds).
ksql.query.timeout=10000

# Output format in the KSQL CLI (allowed JSON or TABULAR).
ksql.output.format=TABULAR

# User for the KSQL server (if applicable).
#ksql.credentials.user=

# Password for the KSQL server (if applicable).
#ksql.credentials.password=

# The location of the key store file. This is optional for client and can be used for two-way authentication for client.
#ssl.keystore.location=

# The store password for the key store file. This is optional for client and only needed if ssl.keystore.location is configured.
#ssl.keystore.password=[hidden]

# The type of keystore file. Must be either 'JKS' or 'PKCS12'.
#ssl.keystore.type=JKS

# Enable auto reload of ssl keystore.
#ssl.keystore.reload=false

# Location to watch for keystore file changes, if different from keystore location.
#ssl.keystore.watch.location=

# The location of the trust store file.
#ssl.truststore.location=

# The password for the trust store file. If a password is not set access to the truststore is still available, but integrity checking is disabled.
#ssl.truststore.password=[hidden]

# The type of trust store file. Must be either 'JKS' or 'PKCS12'.
#ssl.truststore.type=JKS

# SSL mutual auth. Set to NONE to disable SSL client authentication, set to REQUESTED to request but not require SSL client authentication, and set to REQUIRED to require SSL client authentication.
#ssl.client.authentication=NONE

# Enable SSL
#ssl.client.auth=false

# Controls whether a ksql host forwards a pull query request to another host.
#request.ksql.query.pull.skip.forwarding=

# Indicates whether a KsqlRequest came from another server.
#request.ksql.internal.request

# The listener this node will share with other ksqlDB nodes in the cluster for internal communication. In IaaS environments, this may need to be different from the interface to which the server binds. If this is not set, the advertised listener will either default to ksql.internal.listener, if set, or else the first value from listeners will be used. It is not valid to use the 0.0.0.0 (IPv4) or [::] (IPv6) wildcard addresses.
#ksql.advertised.listener=

# The listener used for inter-node communication, if different to the 'listeners' config. The ksql.advertised.listener config can be set to provide an externally routable name for this listener, if required. This listener can be used to bind a separate port or network interface for the internal endpoints, separate from the external client endpoints, and provide a layer of security at the network level.
#ksql.internal.listener=

# How often to send an empty line as part of the response while streaming queries as JSON; this helps proactively determine if the connection has been terminated in order to avoid keeping the created streams job alive longer than necessary
#query.stream.disconnect.check=1000

# How long to wait for a distributed command to be executed by the local node before returning a response
#ksql.server.command.response.timeout.ms=5000

# The directory that ksql is installed in. This is set in the ksql-server-start script.
#ksql.server.install.dir=

# The number of websocket threads to handle query results
#ksql.server.websockets.num.threads=5

# A comma separated list of classes implementing KsqlServerPrecondition. The KSQL server will not start serving requests until all preconditions are satisfied. Until that time, requests will return a 503 error
#ksql.server.preconditions=[]

# Whether or not to set KsqlUncaughtExceptionHandler as the UncaughtExceptionHandler for all threads in the application (this can be overridden). Default is false.
#ksql.server.exception.uncaught.handler.enable=false

# Minimum time between consecutive health check evaluations. Health check queries before the interval has elapsed will receive cached responses.
#ksql.healthcheck.interval.ms=5000

# How long to wait for the command runner to process a command from the command topic before reporting an error metric.
#ksql.server.command.blocked.threshold.error.ms=15000

# A class the implementing ErrorMessages interface.This allows the KSQL server to return pluggable error messages.
#ksql.server.error.messages=class io.confluent.ksql.rest.DefaultErrorMessages

# Whether the heartheat mechanism is enabled or not. It is disabled by default.
#ksql.heartbeat.enable=false

# Interval at which heartbeats are broadcasted to servers.
#ksql.heartbeat.send.interval.ms=100

# Interval at which server processes received heartbeats.
#ksql.heartbeat.check.interval.ms=200

# Size of time window across which to count missed heartbeats.
#ksql.heartbeat.window.ms=2000

# Minimum number of consecutive missed heartbeats that flag a server as down.
#ksql.heartbeat.missed.threshold.ms=3

# Interval at which server attempts to discover what other ksql servers exist in the cluster.
#ksql.heartbeat.discover.interval.ms=2000

# Size of thread pool used for sending / processing heartbeats and cluster discovery.
#ksql.heartbeat.thread.pool.size=3

# Whether lag reporting is enabled or not. It is disabled by default.
#ksql.lag.reporting.enable=false

# Interval at which lag reports are broadcasted to servers.
#ksql.lag.reporting.send.interval.ms=5000

# The number of server verticle instances to start per listener. Usually you want at least many instances as there are cores you want to use, as each instance is single threaded.
#ksql.verticle.instances=16

# Max number of worker threads for executing blocking code
#ksql.worker.pool.size=100

# The maximum number of push queries allowed on the server at any one time
#ksql.max.push.queries=100

# An extension class that allows  custom authentication to be plugged in.
#ksql.authentication.plugin.class=

# Comma separated list of paths that can be accessed without authentication
#authentication.skip.paths=[]

# Method of authentication. Must be BASIC to enable authentication. For BASIC, you must supply a valid JAAS config file for the 'java.security.auth.login.config' system property for the appropriate authentication provider
#authentication.method=NONE

# Security realm to be used in authentication.
#authentication.realm=

# Valid roles to authenticate against.
#authentication.roles=[*]

# Set value for Access-Control-Allow-Origin header
#access.control.allow.origin=

# Set value to Access-Control-Allow-Origin header for specified methods
#access.control.allow.methods=[]

# Set value to Access-Control-Allow-Origin header for specified headers. Leave blank to use default.
#access.control.allow.headers=[]
